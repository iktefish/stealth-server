/*
Data schema for MongoDB interaction.
*/
package schema

import (
	"go.mongodb.org/mongo-driver/bson/primitive"
)

/*
KEY ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[W] ~> Will be done by a async worker automatically and/or periodically
[D] ~> Will have a default value
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

/*
NOTE:
* Periodically compute and update `LocStats`
*/
type LocStats struct { // [W]
	Id             primitive.ObjectID `json:"_id" bson:"_id,omitempty"`
	Loc_Revenue    int                `json:"loc_revenue" bson:"loc_revenue,omitempty"`
	Loc_Investment int                `json:"loc_investment" bson:"loc_investment,omitempty"`
	Loc_Due        int                `json:"loc_due" bson:"loc_due,omitempty"`
}

/*
NOTE:
* Periodically compute and update `LocStats`
* Client will add `schema.Employee` to `Employees`
* Client will add `schema.ComVehicle` to `Com_Vechicles`
*/
type Location struct {
	Label        string             `json:"label" bson:"label,omitempty"`
	Loc_Rent     int                `json:"loc_rent" bson:"loc_rent,omitempty"`
	Loc_Stats    primitive.ObjectID `json:"loc_stats" bson:"loc_stats,omitempty"` // [W]
	Employees    []Employee         `json:"employees" bson:"employees,omitempty"`
	Com_Vehicles []ComVehicle       `json:"com_vehicles" bson:"com_vehicles,omitempty"`
	Daily_Stats  primitive.ObjectID `json:"daily_stats" bson:"daily_stats,omitempty"`
}

/*
NOTE:
* Client will input every field, except `Payment_Due`
* Client MUST input `Assigned_Loc`
* Periodically update `Payment_Due`
* Default value for `Date_Hired` is current date
*/
type Employee struct {
	Email        string             `json:"email" bson:"email,omitempty"`
	First_Name   string             `json:"first_name" bson:"first_name,omitempty"`
	Last_Name    string             `json:"last_name" bson:"last_name,omitempty"`
	Role         Job                `json:"job" bson:"job,omitempty"`
	Date_Hired   primitive.DateTime `json:"date_hired" bson:"date_hired,omitempty"` // [D]: Now
	Pt_Ft        bool               `json:"pt_ft" bson:"pt_ft,omitempty"`
	Hourly_Pay   int                `json:"hourly_pay" bson:"hourly_pay,omitempty"`
	Payment_Due  int                `json:"payment_due" bson:"payment_due,omitempty"` // [W]
	Assigned_Loc int                `json:"assigned_loc" bson:"assigned_loc,omitempty"`
}

/*
NOTE:
* Client will input every field
* Client MUST input `License_Plate`
*/
type ComVehicle struct {
	License_Plate string `json:"license_plate" bson:"license_plate,omitempty"`
	Assigned_To   int    `json:"assigned_to" bson:"assigned_to,omitempty"`
	Assigned_Loc  int    `json:"assigned_loc" bson:"assigned_loc,omitempty"`
}

/*
NOTE:
* Every field will be programatically autogenerated
*/
type DailyStats struct { // [W]
	Day                  primitive.DateTime `json:"day" bson:"day,omitempty"`
	Revenue              int                `json:"revenue" bson:"revenue,omitempty"`
	Invested             int                `json:"invested" bson:"invested,omitempty"`
	Customer_Count       int                `json:"customer_count" bson:"customer_count,omitempty"`
	Transaction_Reciepts primitive.ObjectID `json:"transaction_reciepts" bson"transaction_reciepts,omitempty"`
}

/*
NOTE:
* Client should select `Label`, but can also add more
* Client can +/- quantity, default is 1
*/
type Gear struct {
	Label    string `json:"label" bson:"label,omitempty"`
	Quantity int    `json:"quantity" bson:"quantity,omitempty"`
}

/*
NOTE:
* Client MUST all fields, except `Frequency`
* Automatically update `Frequency` upon every update
*/
type Service struct {
	Name      string `json:"name" bson:"name,omitempty"`
	Price     int    `json:"price" bson:"price,omitempty"`
	Frequency int    `json:"frequency" bson:"frequency,omitempty"`
}

/*
NOTE:
* Client should input all fields
*/
type Job struct {
	Title  string `json:"title" bson:"title,omitempty"`
	Salary int    `json:"salary" bson:"salary,omitempty"`
}

/*
NOTE:
* Client MUST provide all fields (for now ignore `Car_Make` & `Car_Color`)
TODO:
* Programatically get `From_Location` using Google Maps API
*/
type Customer struct {
	Email           string             `json:"email" bson:"email,omitempty"`
	First_Name      string             `json:"first_name" bson:"first_name,omitempty"`
	Last_Name       string             `json:"last_name" bson:"last_name,omitempty"`
	Hashed_Password string             `json:"hashed_password" bson:"hashed_password,omitempty"`
	From_Location   primitive.ObjectID `json:"from_location" bson:"from_location,omitempty"` // [W]
	Car_Make        string             `json:"car_make" bson:"car_make,omitempty"`
	Car_Color       string             `json:"car_color" bson:"car_color,omitempty"`
}

/*
NOTE:
* [Currently is a TODO]
* Information for this schema must be taken vie the Square API
*/
type Reciept struct {
	Transaction_ID   string             `json:"transaction_id" bson:"transaction_id,omitempty"`
	Transaction_Date primitive.DateTime `json:"transaction_date" bson:"transcation_date,omitempty"`
}
